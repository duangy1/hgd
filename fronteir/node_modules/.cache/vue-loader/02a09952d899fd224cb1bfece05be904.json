{"remainingRequest":"F:\\hdb\\fronteir\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\hdb\\fronteir\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\hdb\\fronteir\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\hdb\\fronteir\\src\\components\\FooterBar.vue?vue&type=template&id=f906bf10&scoped=true&","dependencies":[{"path":"F:\\hdb\\fronteir\\src\\components\\FooterBar.vue","mtime":1654785191773},{"path":"F:\\hdb\\fronteir\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\hdb\\fronteir\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"F:\\hdb\\fronteir\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\hdb\\fronteir\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}