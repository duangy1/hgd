{"remainingRequest":"F:\\hdb\\fronteir\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\hdb\\fronteir\\src\\views\\gene-detail.vue?vue&type=template&id=01bba95f&scoped=true&","dependencies":[{"path":"F:\\hdb\\fronteir\\src\\views\\gene-detail.vue","mtime":1665407639540},{"path":"F:\\hdb\\fronteir\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\hdb\\fronteir\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1656480287599},{"path":"F:\\hdb\\fronteir\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\hdb\\fronteir\\node_modules\\vue-loader\\lib\\index.js","mtime":1656480287592}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}