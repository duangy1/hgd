{"remainingRequest":"F:\\hdb\\fronteir\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\hdb\\fronteir\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\hdb\\fronteir\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\hdb\\fronteir\\src\\views\\Documentation.vue?vue&type=template&id=939d8420&scoped=true&","dependencies":[{"path":"F:\\hdb\\fronteir\\src\\views\\Documentation.vue","mtime":1660375824907},{"path":"F:\\hdb\\fronteir\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\hdb\\fronteir\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1656480287599},{"path":"F:\\hdb\\fronteir\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\hdb\\fronteir\\node_modules\\vue-loader\\lib\\index.js","mtime":1656480287592}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}