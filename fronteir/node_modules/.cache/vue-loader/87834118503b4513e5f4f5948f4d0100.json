{"remainingRequest":"F:\\hdb\\fronteir\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\hdb\\fronteir\\src\\views\\Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"F:\\hdb\\fronteir\\src\\views\\Home.vue","mtime":1654849938309},{"path":"F:\\hdb\\fronteir\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\hdb\\fronteir\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"F:\\hdb\\fronteir\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\hdb\\fronteir\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}