{"remainingRequest":"F:\\hdb\\fronteir\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\hdb\\fronteir\\src\\views\\Documentation.vue?vue&type=template&id=bfc37982&scoped=true&","dependencies":[{"path":"F:\\hdb\\fronteir\\src\\views\\Documentation.vue","mtime":1656402001048},{"path":"F:\\hdb\\fronteir\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\hdb\\fronteir\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1656402015186},{"path":"F:\\hdb\\fronteir\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\hdb\\fronteir\\node_modules\\vue-loader\\lib\\index.js","mtime":1656402015177}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}