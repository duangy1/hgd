<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.ac.cncb.ngdc.syndb.mapper.Ortho9031Mapper">
  <resultMap id="BaseResultMap" type="cn.ac.cncb.ngdc.syndb.entity.Ortho9031">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="hdb_gene_id1" jdbcType="VARCHAR" property="hdbId1" />
    <result column="tax_id1" jdbcType="INTEGER" property="tax1" />
    <result column="uniprot_id1" jdbcType="VARCHAR" property="protein1" />
    <result column="ensembl_id1" jdbcType="VARCHAR" property="ensemblId1" />
    <result column="refseq_id1" jdbcType="VARCHAR" property="refseqId1" />
    <result column="gene_id1" jdbcType="VARCHAR" property="geneId1" />
    <result column="entrez_id1" jdbcType="VARCHAR" property="entrezId1" />
    <result column="hdb_gene_id2" jdbcType="VARCHAR" property="hdbId2" />
    <result column="tax_id2" jdbcType="INTEGER" property="tax2" />
    <result column="uniprot_id2" jdbcType="VARCHAR" property="protein2" />
    <result column="refseq_id2" jdbcType="VARCHAR" property="refseqId2" />
    <result column="gene_id2" jdbcType="VARCHAR" property="geneId2" />
    <result column="ensemb_id2" jdbcType="VARCHAR" property="ensemblId2" />
    <result column="entrez_id2" jdbcType="VARCHAR" property="entrezId2" />

    <result column="from_db" jdbcType="VARCHAR" property="fromdb" />
    <result column="db_evidence" jdbcType="VARCHAR" property="dbEvidence" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="last_update_time" jdbcType="TIMESTAMP" property="lastUpdateTime" />
  </resultMap>

  <sql id="Base_Column_List">
    id, protein1, refseqId1, gene_id1, tax1, protein2, refseqId2, gene_id2, tax2, dbinfo, create_time,
    last_update_time
  </sql>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from 9031_ortho
    where id = #{id,jdbcType=INTEGER}
  </select>
<!--  <select id="findOrthByTaxonAndGene" resultMap="BaseResultMap">-->
<!--    select c.taxon1,c.uniprot_id1,c.taxon2,c.uniprot_id2,c.db_evidence,c.from_db-->
<!--from gene_basic_info a inner join ortholog_id_mapping b on a.ensembl_gene_id=b.ensembl_gene_id inner join ortholog_all c on b.uniprot_id=c.uniprot_id1-->
<!--where a.gwas_gene_id=#{geneId} and c.taxon1=#{taxonId}-->

<!--  </select>-->
<!--  这里修改替代了上面的语句，直接判断ensemblid=查询id，等gwas id对应关系整理完了再换上面那个-->
<!--  存在问题：
  1、没有对同源的1、2id都进行判断
  2、速度非常慢
  解决：
  1、在ortholog_idmapping表中加gwasid列，不再查gbi表
  2、修改sql，判断1 or 2 id
-->
<!--  <select id="findOrthByTaxonAndGene" resultMap="BaseResultMap">-->
<!--    select c.tax_id1,c.uniprot_id1,c.tax_id2,c.uniprot_id2,c.db_evidence,c.from_db-->
<!--from ((gene_basic_info a inner join ortholog_id_mapping b on a.ensembl_gene_id=b.ensembl_gene_id )inner join ortholog_all64 c on b.uniprot_id=c.uniprot_id1)-->
<!--where a.ensembl_gene_id=#{geneId} and c.tax_id1=#{taxonId}-->
<!--  </select>-->
<!--select * from ortholog_id_mapping b inner join ortholog_all64 c on b.uniprot_id=c.uniprot_id1 or b.uniprot_id=c.uniprot_id2 where b.ensembl_gene_id=#{geneId} and b.taxon_id=#{taxonId}-->
<!--  这里修改，去掉gene_basic_info的inner join-->
<!--  动物-->
<!--  <select id="findOrthByTaxonAndGene" resultMap="BaseResultMap">-->
<!--     select * from ortholog_id_mapping oim, ortholog_all64 oall where (( oim.uniprot_id=oall.uniprot_id1 and oall.tax_id2 in (9925,9823,9940,9031,9913)) or (oim.uniprot_id=oall.uniprot_id2 and oall.tax_id1 in (9925,9823,9940,9031,9913))) and oim.ensembl_gene_id=#{geneId} and oim.taxon_id=#{taxonId}-->
<!--  </select>-->
<!--  植物-->
  <select id="findOrthByTaxonAndGene" resultMap="BaseResultMap">
     select * from ortholog_id_mapping oim, ortholog_all64 oall where (( oim.uniprot_id=oall.uniprot_id1 and oall.tax_id2 in (3635,102107,4577,3708,4530,4558)) or (oim.uniprot_id=oall.uniprot_id2 and oall.tax_id1 in (3635,102107,4577,3708,4530,4558))) and oim.ensembl_gene_id=#{geneId} and oim.taxon_id=#{taxonId}
  </select>

  <select id="findOrthByTaxon2" resultMap="BaseResultMap">
    select c.taxon1,c.uniprot_id1,c.taxon2,c.uniprot_id2,c.db_evidence,c.from_db
from gene_basic_info2 a inner join ortholog_id_mapping b on a.ensembl_gene_id=b.ensembl_gene_id inner join ortholog_all c on b.uniprot_id=c.uniprot_id1
where a.ensembl_gene_id=#{geneId} and c.taxon1=#{taxonId} and c.taxon2=#{taxonId2}
  </select>

  <select id="findTraitNameByGene" resultType="String">
    select trait_name from trait_all where gene_id=#{geneid}
  </select>

  <select id="findOrthGeneByGivenGeneAndTaxon" parameterType="java.util.HashMap" resultMap="BaseResultMap">
    select * from ortholog_id_mapping oim, ortholog_all64 oall where (( oim.uniprot_id=oall.uniprot_id1
    <if test="taxonList != null ">
      and oall.tax_id2 in
      <foreach item="taxon" index="index" collection="taxonList"  open="(" separator="," close=")">
        #{taxon}
      </foreach>
    </if>
    ) or (oim.uniprot_id=oall.uniprot_id2 and

    <if test="taxonList != null ">
      oall.tax_id1 in
      <foreach item="taxon" index="index" collection="taxonList"  open="(" separator="," close=")">
        #{taxon}
      </foreach>
    </if>
    )) and oim.hdb_gene_id=#{geneId} and oim.taxon_id=#{taxonId}
  </select>
  <select id="selectGeneOrthoInfo" resultMap="BaseResultMap">
    select * from ortholog_all64  where (entrez_id1=#{geneName} or entrez_id2=#{geneName} )
  </select>
</mapper>